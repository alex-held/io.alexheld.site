<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kotlin on Alexander Held</title><link>/de/tags/kotlin/</link><description>Recent content in kotlin on Alexander Held</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 22 Dec 2020 03:07:19 +0100</lastBuildDate><atom:link href="/de/tags/kotlin/index.xml" rel="self" type="application/rss+xml"/><item><title>How to refactor properly</title><link>/de/posts/0001-how-to-refactor-properly/</link><pubDate>Tue, 22 Dec 2020 03:07:19 +0100</pubDate><guid>/de/posts/0001-how-to-refactor-properly/</guid><description>R√ºckblick W√§hrend meines ersten Projektes an dem ich als Software Entickler gearbeitet habe, sollte ich einen microservice refactoren - alleine.
Wie ihr euch sicher denken k√∂nnt, kommt bei soetwas nur Schwachsinn raus. An manchen Stellen war es v√∂llig over-engineered und an anderen Stellen hat es an Kundenfeedback gefehlt. Achja und w√§hrend der gesamtem Zeit konnten wir den Service auch nicht deployen, da ja alles &amp;ldquo;grade besser gemacht wird&amp;rdquo;.
Das muss doch besser gehen üò§ Unser Ziel ist es, den Builder einfacher lesbarer zu bekommen.</description></item></channel></rss>